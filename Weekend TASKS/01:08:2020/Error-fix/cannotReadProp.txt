*Uncaught TypeError: Cannot read property of undefined

‘Undefined’ is the property of the global object. If you don’t assign any value 
to a variable is of type ‘undefined’. A code also return the undefined value when 
the evaluated variable doesn’t have any assigned value.



function test(t) {      //defining a function
  if (t === undefined) {       //if t=undefined, call tt
        console.log(t.tt)      //call tt member from t
  }
  return t;    
}
var a;    //a is a variable with undefined value
console.log(test(a)); //function call

output:
---------------------------------------------------------
| Uncaught TypeError: Cannot read property of undefined  |
---------------------------------------------------------


If you get undefined error, you need to make sure that which ever variables 
throws undefined error, is assigned a value to it.


function test(t) {      //defining a function
  if (t === undefined) {       //if t=undefined, call tt
        console.log(t)      //call t
  }
  return t;    
}
var a=10;    //a is a variable with undefined value
console.log(test(a)); //function call


output:
 ----
| 10 |
 ----

 Ability to work with uninitiated variables/objects is one of the plus points of 
 JavaScript over other languages like Java, C etc. So many times developers are tempted 
 to use this feature, even though it not a very good practice. So if you are a developer 
 that is addicted to not initializing the variables, you can at least attempt to catch the 
 problems before they happen through simple statement.

 if (typeof(jsvariable) == 'undefined') {
  ...
}